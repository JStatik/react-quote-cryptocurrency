{"version":3,"sources":["hooks/useAxios.js","components/Error.js","components/Loading.js","components/Quotation.js","helpers/showLoadingOrData.js","hooks/useForm.js","helpers/isValidQuotationForm.js","components/QuotationForm/CurrencySelect.js","components/QuotationForm/CryptocurrencySelect.js","components/QuotationForm.js","QuoteCryptocurrency.js","index.js"],"names":["useAxios","currency","cryptocurrency","isMountedRef","useRef","useState","data","loading","error","state","setState","useEffect","current","a","url","axios","get","response","quotation","DISPLAY","getQuotation","StyledContainer","styled","div","StyledParagraph","p","Error","React","memo","height","style","StyledSpinner","Loading","className","StylePriceParagraph","StyledInfoParagraph","Quotation","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","showLoadingOrData","useForm","initialState","formValues","setFormValues","handleChange","event","target","name","value","reset","newState","isValidQuotationForm","trim","length","validator","isEmpty","isAlpha","isUppercase","msgErrorQuotation","isValid","StyledLabel","label","StyledSelect","select","CurrencySelect","onChange","CryptocurrencySelect","cryptocurrencies","setCryptocurrencies","Data","getCryptocurrencies","map","cryptocurrencyAPI","CoinInfo","Id","FullName","Name","StyledSubmitButton","button","QuotationForm","setCurrencies","msgError","setMsgError","disabled","setDisabled","autoComplete","onSubmit","preventDefault","escapedCurrency","escape","escapedCryptocurrency","type","StyledImage","img","StyledTitle","h1","QuoteCryptocurrency","currencies","src","alt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50ea3911.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst useAxios = ( currency, cryptocurrency ) => {\r\n    const isMountedRef = useRef( true );\r\n    const [ state, setState ] = useState( { data: {}, loading: true, error: null } );\r\n\r\n    useEffect( () => {\r\n        return () => {\r\n            isMountedRef.current = false;\r\n        }\r\n    }, [] )\r\n\r\n    useEffect( () => {\r\n        if( currency !== '' && cryptocurrency !== '' ) {\r\n            setState( { data: {}, loading: true, error: null } );\r\n\r\n            const getQuotation = async() => {\r\n                try{\r\n                    const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${ cryptocurrency }&tsyms=${ currency }`;\r\n                    const response = await axios.get( url );\r\n\r\n                    const quotation = response.data.DISPLAY[ cryptocurrency ][ currency ];\r\n\r\n                    isMountedRef.current && setState( { data: quotation, loading: false, error: null } );  \r\n                } catch( e ) {\r\n                    setState( { data: {}, loading: false, error: 'Error en la peticion' } );\r\n                }                \r\n            };\r\n\r\n            getQuotation();\r\n        }\r\n    }, [ currency, cryptocurrency ] );\r\n\r\n    return state;\r\n};\r\n\r\nexport default useAxios;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\n\r\nconst StyledContainer = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst StyledParagraph = styled.p`  \r\n    background-color: #990000;\r\n    border-radius: 10px;\r\n    color: #fff; \r\n    font-family: 'Bebas Neue', cursive;\r\n    font-size: 22px;\r\n    margin: 0;\r\n    padding: 0.5rem;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n`;\r\n\r\nconst Error = React.memo( ( { error, height } ) => {\r\n    return (\r\n        <StyledContainer style={ { height: height } }>\r\n            <StyledParagraph >{ error }</StyledParagraph>\r\n        </StyledContainer>\r\n    );\r\n} );\r\n\r\nError.propTypes = {\r\n    error: PropTypes.string.isRequired,\r\n    height: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Error;\r\n","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst StyledContainer = styled.div`\r\n    align-items: center;\r\n    display: flex;\r\n    height: 250px;\r\n    justify-content: center;\r\n`;\r\n\r\nconst StyledSpinner = styled.div`\r\n    height: 40px;\r\n    margin: 100px auto;\r\n    position: relative;\r\n    width: 40px;\r\n\r\n    .cube1, .cube2 {\r\n        -webkit-animation: sk-cubemove 1.8s infinite ease-in-out;\r\n        animation: sk-cubemove 1.8s infinite ease-in-out;\r\n        background-color: #fff;\r\n        height: 15px;\r\n        left: 0;     \r\n        position: absolute;\r\n        top: 0;      \r\n        width: 15px;\r\n    }\r\n\r\n    .cube2 {\r\n        -webkit-animation-delay: -0.9s;\r\n        animation-delay: -0.9s;\r\n    }\r\n\r\n    @-webkit-keyframes sk-cubemove {\r\n        25% { -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5) }\r\n        50% { -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg) }\r\n        75% { -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5) }\r\n        100% { -webkit-transform: rotate(-360deg) }\r\n    }\r\n\r\n    @keyframes sk-cubemove {\r\n        25% { \r\n            transform: translateX(42px) rotate(-90deg) scale(0.5);\r\n            -webkit-transform: translateX(42px) rotate(-90deg) scale(0.5);\r\n        } 50% { \r\n            transform: translateX(42px) translateY(42px) rotate(-179deg);\r\n            -webkit-transform: translateX(42px) translateY(42px) rotate(-179deg);\r\n        } 50.1% { \r\n            transform: translateX(42px) translateY(42px) rotate(-180deg);\r\n            -webkit-transform: translateX(42px) translateY(42px) rotate(-180deg);\r\n        } 75% { \r\n            transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\r\n            -webkit-transform: translateX(0px) translateY(42px) rotate(-270deg) scale(0.5);\r\n        } 100% { \r\n            transform: rotate(-360deg);\r\n            -webkit-transform: rotate(-360deg);\r\n        }\r\n    }\r\n`;\r\n\r\nconst Loading = React.memo( () => {\r\n    return (\r\n        <StyledContainer>\r\n            <StyledSpinner className=\"spinner\">\r\n                <div className=\"cube1\"></div>\r\n                <div className=\"cube2\"></div>\r\n            </StyledSpinner>\r\n        </StyledContainer>\r\n    );\r\n} );\r\n\r\nexport default Loading;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\n\r\nconst StyledContainer = styled.div`\r\n    color: #fff;\r\n`;\r\n\r\nconst StylePriceParagraph = styled.p`\r\n    font-size: 30px;\r\n`;\r\n\r\nconst StyledInfoParagraph = styled.p`\r\n    font-size: 18px;\r\n\r\n    span {\r\n        text-decoration: underline;\r\n        font-weight: 500;\r\n    }\r\n`;\r\n\r\nconst Quotation = React.memo( ( { quotation } ) => {\r\n    const { PRICE, HIGHDAY, LOWDAY, CHANGEPCT24HOUR, LASTUPDATE } = quotation;\r\n\r\n    return (\r\n        <StyledContainer>\r\n            <StylePriceParagraph>El precio actual es: <span>{ PRICE }</span></StylePriceParagraph>\r\n            <StyledInfoParagraph>El precio más alto del día es: <span>{ HIGHDAY }</span></StyledInfoParagraph>\r\n            <StyledInfoParagraph>El precio más bajo del día es: <span>{ LOWDAY }</span></StyledInfoParagraph>\r\n            <StyledInfoParagraph>Variación en las últimas 24 hs: <span>{ CHANGEPCT24HOUR } %</span></StyledInfoParagraph>\r\n            <StyledInfoParagraph>Última actualización: <span>{ LASTUPDATE }</span></StyledInfoParagraph>\r\n        </StyledContainer>\r\n    );\r\n} );\r\n\r\nQuotation.propTypes = {\r\n    quotation: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Quotation;\r\n","import Error from '../components/Error';\r\nimport Loading from '../components/Loading';\r\nimport Quotation from '../components/Quotation';\r\n\r\nconst showLoadingOrData = ( quotation, loading, error ) => {\r\n    if( loading ) {\r\n        return <Loading />\r\n    } else {\r\n        if( error ) {\r\n            return <Error error=\"No se pudo obtener la cotización, intente nuevamente.\" height=\"250px\" />\r\n        } else {\r\n            return <Quotation quotation={ quotation }/>\r\n        }\r\n    }\r\n};\r\n\r\nexport default showLoadingOrData;\r\n","import { useState } from 'react';\r\n\r\nconst useForm = ( initialState = {} ) => {\r\n    const [ formValues, setFormValues ] = useState( initialState );\r\n\r\n    const handleChange = ( event ) => {\r\n        setFormValues( {\r\n            ...formValues,\r\n            [ event.target.name ]: event.target.value\r\n        } );\r\n    };\r\n\r\n    const reset = ( newState = initialState ) => {\r\n        setFormValues( newState );\r\n    };\r\n\r\n    return [ formValues, handleChange, reset ];\r\n};\r\n\r\nexport default useForm;\r\n","import validator from 'validator';\r\n\r\nconst isValidQuotationForm = ( currency, cryptocurrency ) => {\r\n    if( currency.trim().length < 3 || validator.isEmpty( currency ) || !validator.isAlpha( currency, [ 'es-ES' ] ) || !validator.isUppercase( currency ) ) {\r\n        return {\r\n            msgErrorQuotation: 'Ingrese una moneda válida.',\r\n            isValid: false\r\n        };\r\n    } else if( cryptocurrency.trim().length < 3 || validator.isEmpty( cryptocurrency ) || !validator.isAlpha( cryptocurrency, [ 'es-ES' ] ) || !validator.isUppercase( cryptocurrency ) ) {\r\n        return {\r\n            msgErrorQuotation: 'Ingrese una cryptomoneda válida.',\r\n            isValid: false\r\n        };\r\n    }\r\n\r\n    return {\r\n        msgErrorQuotation: null,\r\n        isValid: true\r\n    };\r\n};\r\n\r\nexport default isValidQuotationForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\n\r\nconst StyledLabel = styled.label`\r\n    color: #fff;\r\n    display: block;\r\n    font-family: 'Bebas Neue', cursive;\r\n    font-size: 2.4rem;\r\n    font-weight: bold;\r\n    margin-top: 2rem;\r\n    text-transform: uppercase;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n    --webkit-appearance: none;\r\n    border: none;\r\n    border-radius: 10px;\r\n    font-size: 1.2rem;\r\n    display: block;\r\n    outline: none;\r\n    padding: 1rem;\r\n    width: 100%;\r\n`;\r\n\r\nconst CurrencySelect = ( { currency, handleChange } ) => {\r\n    return (\r\n        <>\r\n            <StyledLabel>Moneda</StyledLabel>\r\n            <StyledSelect\r\n                name=\"currency\"\r\n                value={ currency }\r\n                onChange={ handleChange }\r\n            >\r\n                <option value=\"\">-Seleccione una opción-</option>\r\n                <option value=\"USD\">Dólar Estadounidense</option>\r\n                <option value=\"EUR\">Euro</option>\r\n                <option value=\"GBP\">Libra Esterlina</option>\r\n                <option value=\"ARS\">Peso Argentino</option>\r\n                <option value=\"COP\">Peso Colombiano</option>\r\n                <option value=\"MXN\">Peso Mexicano</option>\r\n            </StyledSelect>\r\n        </>\r\n    );\r\n};\r\n\r\nCurrencySelect.propTypes = {\r\n    currency: PropTypes.string.isRequired,\r\n    handleChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CurrencySelect;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport axios from 'axios';\r\n\r\nconst StyledLabel = styled.label`\r\n    color: #fff;\r\n    display: block;\r\n    font-family: 'Bebas Neue', cursive;\r\n    font-size: 2.4rem;\r\n    font-weight: bold;\r\n    margin-top: 2rem;\r\n    text-transform: uppercase;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n    --webkit-appearance: none;\r\n    border: none;\r\n    border-radius: 10px;\r\n    font-size: 1.2rem;\r\n    display: block;\r\n    outline: none;\r\n    padding: 1rem;\r\n    width: 100%;\r\n`;\r\n\r\nconst CryptocurrencySelect = ( { cryptocurrency, handleChange } ) => {\r\n    const [ cryptocurrencies, setCryptocurrencies ] = useState( [] );\r\n\r\n    useEffect( () => {\r\n        const getCryptocurrencies = async() => {\r\n            const response = await axios.get( 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD' );\r\n            const { Data } = response.data;\r\n\r\n            setCryptocurrencies( Data );\r\n        };\r\n\r\n        getCryptocurrencies();\r\n    }, [] );\r\n\r\n    return (\r\n        <>\r\n            <StyledLabel>Cryptomoneda</StyledLabel>\r\n            <StyledSelect\r\n                name=\"cryptocurrency\"\r\n                value={ cryptocurrency }\r\n                onChange={ handleChange }\r\n            >\r\n                <option value=\"\">-Seleccione una opción-</option>\r\n                \r\n                {\r\n                    cryptocurrencies.map( cryptocurrencyAPI => {\r\n                        const { Id, FullName, Name } = cryptocurrencyAPI.CoinInfo;\r\n\r\n                        return <option key={ Id } value={ Name }>{ FullName }</option>\r\n                    } )\r\n                }\r\n            </StyledSelect>\r\n        </>\r\n    );\r\n};\r\n\r\nCryptocurrencySelect.propTypes = {\r\n    cryptocurrency: PropTypes.string.isRequired,\r\n    handleChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CryptocurrencySelect;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport validator from 'validator';\r\nimport useForm from '../hooks/useForm';\r\nimport isValidQuotationForm from '../helpers/isValidQuotationForm';\r\nimport Error from './Error';\r\nimport CurrencySelect from './QuotationForm/CurrencySelect';\r\nimport CryptocurrencySelect from './QuotationForm/CryptocurrencySelect';\r\n\r\nconst StyledSubmitButton = styled.button`\r\n    background: #66a2fe;\r\n    border: none;\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    margin-top: 20px;\r\n    outline: none;\r\n    padding: 10px;\r\n    transition: background .3s ease;\r\n    width: 100%;\r\n\r\n    &:hover {\r\n        background: #326AC0;\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:disabled {\r\n        background: #66a2fe;\r\n        cursor: not-allowed;\r\n        opacity: 0.4;\r\n    }\r\n`;\r\n\r\nconst QuotationForm = ( { setCurrencies } ) => {\r\n    const [ formValues, handleChange, reset ] = useForm( { currency: '', cryptocurrency: '' } );\r\n    const { currency, cryptocurrency } = formValues;\r\n\r\n    const [ msgError, setMsgError ] = useState( null );\r\n    const [ disabled, setDisabled ] = useState( false );\r\n\r\n    const handleSubmit = ( event ) => {\r\n        event.preventDefault();\r\n\r\n        setDisabled( true );\r\n\r\n        const escapedCurrency = validator.escape( currency );\r\n        const escapedCryptocurrency = validator.escape( cryptocurrency );\r\n\r\n        const { msgErrorQuotation, isValid } = isValidQuotationForm( escapedCurrency, escapedCryptocurrency );\r\n        setMsgError( msgErrorQuotation );\r\n\r\n        if( isValid ) {\r\n            setCurrencies( {\r\n                currency: escapedCurrency,\r\n                cryptocurrency: escapedCryptocurrency\r\n            } );\r\n\r\n            reset();\r\n        }\r\n\r\n        setDisabled( false );\r\n    };\r\n\r\n    return (\r\n        <form autoComplete=\"off\" onSubmit={ handleSubmit }>\r\n            { msgError && <Error error={ msgError } height=\"auto\" /> }\r\n\r\n            <div>\r\n                <CurrencySelect\r\n                    currency={ currency }\r\n                    handleChange={ handleChange }\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <CryptocurrencySelect\r\n                    cryptocurrency={ cryptocurrency }\r\n                    handleChange={ handleChange }\r\n                />\r\n            </div>\r\n\r\n            <StyledSubmitButton\r\n                type=\"submit\"\r\n                disabled={ disabled }\r\n            >\r\n                Cotizar\r\n            </StyledSubmitButton>\r\n        </form>\r\n    );\r\n};\r\n\r\nQuotationForm.propTypes = {\r\n    setCurrencies: PropTypes.func.isRequired\r\n};\r\n\r\nexport default QuotationForm;\r\n","import React, { useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useAxios from './hooks/useAxios';\r\nimport showLoadingOrData from './helpers/showLoadingOrData';\r\nimport QuotationForm from './components/QuotationForm';\r\n\r\nconst StyledContainer = styled.div`\r\n    margin: 0 auto;\r\n    max-width: 1000px;\r\n\r\n    @media( min-width: 992px ) {\r\n        column-gap: 2rem;\r\n        display: grid;\r\n        grid-template-columns: repeat( 2, 1fr );\r\n    }\r\n`;\r\n\r\nconst StyledImage = styled.img`\r\n    margin-top: 5rem;\r\n    max-width: 100%;\r\n`;\r\n\r\nconst StyledTitle = styled.h1`\r\n    color: #fff;\r\n    font-family: 'Bebas Neue', cursive;\r\n    font-size: 50px;\r\n    font-weight: 700;\r\n    margin-bottom: 50px;\r\n    margin-top: 80px;\r\n    text-align: left;\r\n\r\n    &::after {\r\n        background: #66A2FE;\r\n        content: '';\r\n        display: block;\r\n        height: 6px;\r\n        width: 100px;\r\n    }\r\n`;\r\n\r\nconst QuoteCryptocurrency = () => {\r\n    const [ currencies, setCurrencies ] = useState( { currency: '', cryptocurrency: '' } );\r\n    const { currency, cryptocurrency } = currencies;\r\n\r\n    const { data: quotation, loading, error } = useAxios( currency, cryptocurrency );\r\n\r\n    return (\r\n        <StyledContainer>\r\n            <div>\r\n                <StyledImage\r\n                    src=\"./assets/img/cryptomonedas.png\"\r\n                    alt=\"Cryptomonedas\"\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <StyledTitle>Cotizador de Cryptomonedas</StyledTitle>\r\n\r\n                <QuotationForm setCurrencies={ setCurrencies } />\r\n\r\n                {\r\n                    ( currency !== '' && cryptocurrency !== '' ) && showLoadingOrData( quotation, loading, error )\r\n                }\r\n            </div>\r\n        </StyledContainer>\r\n    );\r\n};\r\n\r\nexport default QuoteCryptocurrency;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport QuoteCryptocurrency from './QuoteCryptocurrency';\r\n\r\nReactDOM.render( <QuoteCryptocurrency />, document.getElementById( 'root' ) );\r\n"],"sourceRoot":""}